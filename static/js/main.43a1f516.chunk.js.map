{"version":3,"sources":["components/StockTableRow.jsx","components/StockPriceArrow.jsx","components/StocksTable.jsx","chartConfig.js","components/StockMarketGraph.jsx","components/StockLoader.jsx","components/LiveStockBoard.jsx","App.js","serviceWorker.js","index.js"],"names":["StockTableRow","props","stock","history","stock_data","react_default","a","createElement","className","is_selected","id","stock_name","onClick","toggleStockSelection","bind","toUpperCase","current_value","slice","value","toFixed","build","data","map","color","lib_default","date","time","StockPriceArrow","title","current_trend","StocksTable","resetData","components_StockPriceArrow","market_trend","Object","keys","stocks","index","current_stock","components_StockTableRow","key","areStocksLoaded","colSpan","chartJsConfig","responsive","scales","xAxes","type","distribution","ticks","source","displayFormats","second","unit","scaleLabel","display","fontSize","labelString","yAxes","beginAtZero","stepValue","steps","pan","enabled","mode","chartColors","chartDataset","stock_values","label","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","myChartRef","React","createRef","StockMarketGraph","getStockValues","t","Date","y","useEffect","chart","current","chartInstance","length","datasets","update","chart_dataset","find","dataset","concat","splice","indexOf","updateChart","es","options","ref","StockLoader","connectionError","stocksUrl","LiveStockBoard","state","undefined","componentDidMount","_this","connection","WebSocket","onmessage","saveNewStockValues","onclose","setState","event","hideSpinner","result","JSON","parse","up_values_count","down_values_count","current_time","now","new_stocks","Number","push","newMarketTrend","up_count","down_count","pop","components_StocksTable","this","components_StockMarketGraph","showSpinner","components_StockLoader","Component","App","hasError","error","info","console","log","Error","components_LiveStockBoard","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.43a1f516.chunk.js","sourcesContent":["import React from \"react\";\nimport { Sparklines, SparklinesLine } from \"react-sparklines\";\nimport TimeAgo from \"react-timeago\";\n\nconst StockTableRow = (props) => {\n  let history = props.stock_data.history;\n\n  // color for stock price, red for decrease and green for increase\n  function getStockValueColor(stock) {\n    if (stock.current_value < stock.history.slice(-2)[0].value) {\n      return \"red\";\n    } else if (stock.current_value > stock.history.slice(-2)[0].value) {\n      return \"green\";\n    } else {\n      return null;\n    }\n  }\n\n  return (\n    <tr\n      className={props.stock_data.is_selected ? \"selected\" : null}\n      id={props.stock_name}\n      onClick={props.toggleStockSelection.bind(this, props.stock_name)}\n    >\n      <td>{props.stock_name.toUpperCase()}</td>\n      <td className={getStockValueColor(props.stock_data)}>\n        {props.stock_data.current_value.toFixed(2)}\n      </td>\n      <td>\n        <Sparklines\n          data={history.map((history) => {\n            return history.value;\n          })}\n        >\n          <SparklinesLine color=\"blue\" />\n        </Sparklines>\n      </td>\n      <td className=\"updated_at\">\n        <TimeAgo date={history.slice(-1)[0].time} />\n      </td>\n    </tr>\n  );\n};\n\nexport default StockTableRow;\n","import React from \"react\";\n\nconst StockPriceArrow = (props) => {\n  // Arrow with color for stock price, red for decrease and green for increase\n  return (\n    <span title=\"Market trend\" className={\"icon market-trend\"}>\n      {getArrow()}\n    </span>\n  );\n  function getArrow() {\n    if (props.current_trend === \"up\") {\n      return <span className=\"up-arrow\">&#8679;</span>;\n    } else if (props.current_trend === \"down\") {\n      return <span className=\"down-arrow\">&#8681;</span>;\n    } else {\n      return \"-\";\n    }\n  }\n};\n\nexport default StockPriceArrow;\n","import React from \"react\";\nimport StockTableRow from \"./StockTableRow.jsx\";\nimport StockPriceArrow from \"./StockPriceArrow.jsx\";\n\nconst StocksTable = (props) => {\n  return (\n    <div className=\"card column is-two-fifths is-mobile\" id=\"stocks_list\">\n      <div className=\"card-header title is-1\">Live Stocks</div>\n      <button\n        className=\"button is-normal is-warning is-pulled-right\"\n        onClick={props.resetData}\n      >\n        Reset\n      </button>\n      <div className=\"card-content\">\n        <table className=\"table is-striped is-hoverable\">\n          <thead>\n            <tr>\n              <th>Ticker</th>\n              <th>\n                Price\n                <StockPriceArrow current_trend={props.market_trend} />\n              </th>\n              <th>History</th>\n              <th>Last Update</th>\n            </tr>\n          </thead>\n          <tbody>\n            {Object.keys(props.stocks).map((stock_name, index) => {\n              let current_stock = props.stocks[stock_name];\n              return (\n                <StockTableRow\n                  key={index}\n                  stock_name={stock_name}\n                  stock_data={current_stock}\n                  toggleStockSelection={props.toggleStockSelection}\n                />\n              );\n            })}\n            {props.areStocksLoaded() ? null : (\n              <tr>\n                <td colSpan=\"4\">No stocks loaded yet!</td>\n              </tr>\n            )}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n};\n\nexport default StocksTable;\n","// ChartJs configurations\n\nexport const chartJsConfig = {\n  responsive: true,\n  scales: {\n    xAxes: [\n      {\n        type: \"time\",\n        distribution: \"linear\",\n        ticks: {\n          source: \"auto\",\n        },\n        time: {\n          displayFormats: { second: \"h:mm:ss a\" },\n          unit: \"second\",\n        },\n        scaleLabel: {\n          display: true,\n          fontSize: 18,\n          labelString: \"Time (h:mm:ss)\",\n        },\n      },\n    ],\n    yAxes: [\n      {\n        ticks: {\n          beginAtZero: true,\n          stepValue: 10,\n          steps: 10,\n        },\n        scaleLabel: {\n          display: true,\n          fontSize: 18,\n          labelString: \"Price (₹)\",\n        },\n      },\n    ],\n  },\n  pan: {\n    enabled: true,\n    mode: \"x\",\n  },\n};\n\n// keep enough colors for all stocks adding manually for colors to actually look good\nexport const chartColors = [\n  \"rgb(244, 67, 54)\",\n  \"rgb(76, 175, 80)\",\n  \"rgb(63, 81, 181)\",\n  \"rgb(255, 152, 0)\",\n  \"rgb(33, 150, 243)\",\n  \"rgb(139, 195, 74)\",\n  \"rgb(255, 87, 34)\",\n  \"rgb(121, 85, 72)\",\n  \"rgb(233, 30, 99)\",\n  \"rgb(205, 220, 57)\",\n  \"rgb(156, 39, 176)\",\n  \"rgb(255, 235, 59)\",\n  \"rgb(158, 158, 158)\",\n  \"rgb(103, 58, 183)\",\n  \"rgb(0, 150, 136)\",\n  \"rgb(255, 193, 7)\",\n  \"rgb(96, 125, 139)\",\n  \"rgb(33, 33, 33)\",\n  \"rgb(169, 4, 4)\",\n  \"rgb(1, 74, 64)\",\n  \"rgb(179, 3, 72)\",\n  \"rgb(84, 58, 68)\",\n];\n\nexport const chartDataset = (stock_name, color, stock_values) => {\n  return {\n    label: stock_name.toUpperCase(),\n    fill: false,\n    lineTension: 0,\n    backgroundColor: color,\n    borderColor: color,\n    borderCapStyle: \"butt\",\n    borderJoinStyle: \"miter\",\n    pointBorderColor: color,\n    pointBackgroundColor: \"#fff\",\n    pointBorderWidth: 1,\n    pointHoverRadius: 5,\n    pointHoverBackgroundColor: color,\n    pointHoverBorderColor: color,\n    pointHoverBorderWidth: 2,\n    pointRadius: 3,\n    pointHitRadius: 10,\n    data: stock_values,\n  };\n};\n","import React, { useEffect } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport { chartJsConfig, chartColors, chartDataset } from \"../chartConfig.js\";\nconst myChartRef = React.createRef();\n\nconst StockMarketGraph = (props) => {\n  // Update chart State\n  function updateChart() {\n    let chart = myChartRef.current.chartInstance;\n\n    if (Object.keys(props.stocks).length === 0) {\n      chart.data.datasets = [];\n      return chart.update();\n    }\n\n    // eslint-disable-next-line array-callback-return\n    Object.keys(props.stocks).map((stock_name, index) => {\n      let current_stock = props.stocks[stock_name];\n      let chart_dataset = chart.data.datasets.find((dataset) => {\n        return dataset.label === stock_name.toUpperCase();\n      });\n\n      if (current_stock.is_selected) {\n        let current_stock = props.stocks[stock_name];\n        if (chart_dataset) {\n          // No need to create dataset, only data is updated\n          chart_dataset.data = getStockValues(current_stock);\n        } else {\n          // New dataset is created for graph\n          if (current_stock) {\n            chart.data.datasets = chart.data.datasets.concat([\n              chartDataset(\n                stock_name,\n                chartColors[index],\n                getStockValues(current_stock)\n              ),\n            ]);\n          }\n        }\n      } else {\n        // Dataset is removed from graph\n        if (chart_dataset) {\n          chart.data.datasets.splice(\n            chart.data.datasets.indexOf(chart_dataset),\n            1\n          );\n        }\n      }\n      chart.update();\n    });\n  }\n\n  useEffect(() => {\n    updateChart();\n  });\n\n  // {t: timestamp, y: price} returns an array of objects\n  function getStockValues(stock) {\n    return stock.history.map((history) => {\n      return { t: new Date(history.time), y: history.value };\n    });\n  }\n\n  return (\n    <div className={\"card column\"}>\n      <div className=\"card-header title is-1\">Stock Graph</div>\n      <div className=\"card-content\">\n        <p className=\"is-size-12 has-text-info\">\n          {myChartRef.current &&\n          myChartRef.current.chartInstance.data.datasets.length > 0\n            ? \"Compare Selected Stocks for better Understanding.\"\n            : \"Click on any stocks on your left stock table to see their graphs.\"}\n        </p>\n        <Line\n          data={{ datasets: [] }}\n          options={chartJsConfig}\n          ref={myChartRef}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default StockMarketGraph;\n","import React from \"react\";\n\nconst StockLoader = (props) => {\n  if (props.connectionError) {\n    return (\n      <div className=\"is-medium\">\n        <span className=\"has-text-danger\">No Data Present</span>\n        <br />\n        (Try again later)\n      </div>\n    );\n  } else {\n    return (\n      <div className=\"tag is-large is-info\">\n        <span className=\"loader\"> &nbsp;</span>\n        &nbsp; &nbsp; Please Wait Fetching Stocks ...\n      </div>\n    );\n  }\n};\n\nexport default StockLoader;\n","/* eslint-disable array-callback-return */\nimport React from \"react\";\nimport \"bulma/css/bulma.css\";\nimport StocksTable from \"./StocksTable.jsx\";\nimport StockMarketGraph from \"./StockMarketGraph.jsx\";\nimport StockLoader from \"./StockLoader.jsx\";\n\nconst stocksUrl = \"ws://stocks.mnet.website/\";\n\nclass LiveStockBoard extends React.Component {\n  state = {\n    // stocks = {name: {current_price: 12, history: [{time: '2131', price: 45}, ...], is_selected: false}, ...}\n    stocks: {},\n    market_trend: undefined, // Stock price from previous data up/down\n    connectionError: false,\n  };\n\n  componentDidMount = () => {\n    this.connection = new WebSocket(stocksUrl);\n    this.connection.onmessage = this.saveNewStockValues;\n    this.connection.onclose = () => {\n      this.setState({ connectionError: true });\n    };\n  };\n\n  saveNewStockValues = (event) => {\n    this.props.hideSpinner();\n    let result = JSON.parse(event.data);\n    let [up_values_count, down_values_count] = [0, 0];\n\n    // Better for StockMarketGraphs to store time in histories consisitent\n    let current_time = Date.now();\n    let new_stocks = this.state.stocks;\n    result.map((stock) => {\n      // stock =[ [ name, price], [ name, price] … ]\n      if (this.state.stocks[stock[0]]) {\n        new_stocks[stock[0]].current_value > Number(stock[1])\n          ? up_values_count++\n          : down_values_count++;\n\n        new_stocks[stock[0]].current_value = Number(stock[1]);\n        new_stocks[stock[0]].history.push({\n          time: current_time,\n          value: Number(stock[1]),\n        });\n      } else {\n        new_stocks[stock[0]] = {\n          current_value: stock[1],\n          history: [{ time: Date.now(), value: Number(stock[1]) }],\n          is_selected: false,\n        };\n      }\n    });\n    this.setState({\n      stocks: new_stocks,\n      market_trend: this.newMarketTrend(up_values_count, down_values_count),\n    });\n  };\n\n  // New price entering table, not all stocks\n  newMarketTrend = (up_count, down_count) => {\n    if (up_count === down_count) return undefined;\n    return up_count > down_count ? \"up\" : \"down\";\n  };\n\n  toggleStockSelection = (stock_name) => {\n    let new_stocks = this.state.stocks;\n    new_stocks[stock_name].is_selected = !new_stocks[stock_name].is_selected;\n    this.setState({ stocks: new_stocks });\n  };\n\n  resetData = () => {\n    let new_stocks = this.state.stocks;\n    Object.keys(this.state.stocks).map((stock_name, index) => {\n      new_stocks[stock_name].history = [new_stocks[stock_name].history.pop()];\n    });\n    this.setState({ stocks: new_stocks });\n  };\n\n  areStocksLoaded = () => {\n    return Object.keys(this.state.stocks).length > 0;\n  };\n\n  render() {\n    return (\n      <div className=\"container\">\n        <div className=\"columns\">\n          <StocksTable\n            stocks={this.state.stocks}\n            toggleStockSelection={this.toggleStockSelection}\n            resetData={this.resetData}\n            market_trend={this.state.market_trend}\n            areStocksLoaded={this.areStocksLoaded}\n          />\n          <StockMarketGraph stocks={this.state.stocks} />\n        </div>\n        <div className={this.props.showSpinner ? \"modal is-active\" : \"modal\"}>\n          <div className=\"modal-background\" />\n          <div className=\"modal-content\">\n            <StockLoader connectionError={this.state.connectionError} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default LiveStockBoard;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport LiveStockBoard from \"./components/LiveStockBoard.jsx\";\n\nclass App extends Component {\n  state = {\n    hasError: false,\n    showSpinner: true,\n  };\n\n  static getDerivedStateFromError(error) {\n    console.log(\"some error has occured\");\n    return { hasError: true };\n  }\n\n  // logging error\n  componentDidCatch(error, info) {\n    console.log(error, info);\n  }\n\n  hideSpinner = () => {\n    this.setState({ showSpinner: false });\n  };\n\n  render() {\n    if (this.state.hasError) {\n      return Error;\n    }\n    return (\n      <div className=\"App\">\n        <LiveStockBoard\n          hideSpinner={this.hideSpinner}\n          showSpinner={this.state.showSpinner}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}